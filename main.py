import streamlit as st
import google.generativeai as genai
import os
from datetime import datetime
from typing import Tuple
import re

# Configura√ß√£o inicial
st.set_page_config(
    page_title="Gerador de Briefings - SYN",
    page_icon="üìã"
)

# Dicion√°rio de descri√ß√µes de produtos
PRODUCT_DESCRIPTIONS = {
    "FORTENZA": "Tratamento de sementes inseticida, focado no Cerrado e posicionado para controle do complexo de lagartas e outras pragas iniciais. Comunica√ß√£o focada no mercado 'on farm' (tratamento feito na fazenda).",
    "ALADE": "Fungicida para controle de doen√ßas em soja, frequentemente posicionado em programa com Mitrion para controle de podrid√µes de vagens e gr√£os.",
    "VERDAVIS": "Inseticida e acaricida composto por PLINAZOLIN¬Æ technology (nova mol√©cula, novo grupo qu√≠mico, modo de a√ß√£o in√©dito) + lambda-cialotrina. KBFs: + mais choque, + mais espectro e + mais dias de controle.",
    "ENGEO PLENO S": "Inseticida de tradi√ß√£o, refer√™ncia no controle de percevejos. Mote: 'Nunca foi sorte. Sempre foi Engeo Pleno S'.",
    "MEGAFOL": "Bioativador da Syngenta Biologicals. Origem 100% natural (extratos vegetais e de algas Ascophyllum nodosum). Desenvolvido para garantir que a planta alcance todo seu potencial produtivo.",
    "MIRAVIS DUO": "Fungicida da fam√≠lia Miravis. Traz ADEPIDYN technology (novo ingrediente ativo, novo grupo qu√≠mico). Focado no controle de manchas foliares.",
    "AVICTA COMPLETO": "Oferta comercial de tratamento industrial de sementes (TSI). Composto por inseticida, fungicida e nematicida.",
    "MITRION": "Fungicida para controle de doen√ßas em soja, frequentemente posicionado em programa com Alade.",
    "AXIAL": "Herbicida para trigo. Composto por um novo ingrediente ativo. Foco no controle do azev√©m.",
    "CERTANO": "Bionematicida e biofungicida. Composto pela bact√©ria Bacillus velezensis. Controla nematoides e fungos de solo.",
    "MANEJO LIMPO": "Programa da Syngenta para manejo integrado de plantas daninhas.",
    "ELESTAL NEO": "Fungicida para controle de doen√ßas em soja e algod√£o.",
    "FRONDEO": "Inseticida para cana-de-a√ß√∫car com foco no controle da broca da cana.",
    "FORTENZA ELITE": "Oferta comercial de TSI. Solu√ß√£o robusta contra pragas, doen√ßas e nematoides do Cerrado.",
    "REVERB": "Produto para manejo de doen√ßas em soja e milho com a√ß√£o prolongada ou de espectro amplo.",
    "YIELDON": "Produto focado em maximizar a produtividade das lavouras.",
    "ORONDIS FLEXI": "Fungicida com flexibilidade de uso para controle de requeima, m√≠ldios e manchas.",
    "RIZOLIQ LLI": "Inoculante ou produto para tratamento de sementes que atua na rizosfera.",
    "ARVATICO": "Fungicida ou inseticida com a√ß√£o espec√≠fica para controle de doen√ßas foliares ou pragas.",
    "VERDADERO": "Produto relacionado √† sa√∫de do solo ou nutri√ß√£o vegetal.",
    "MIRAVIS": "Fungicida da fam√≠lia Miravis para controle de doen√ßas.",
    "MIRAVIS PRO": "Fungicida premium da fam√≠lia Miravis para controle avan√ßado de doen√ßas.",
    "INSTIVO": "Lagarticida posicionado como especialista no controle de lagartas do g√™nero Spodoptera.",
    "CYPRESS": "Fungicida posicionado para √∫ltimas aplica√ß√µes na soja, consolidando o manejo de doen√ßas.",
    "CALARIS": "Herbicida composto por atrazina + mesotriona para controle de plantas daninhas no milho.",
    "SPONTA": "Inseticida para algod√£o com PLINAZOLIN¬Æ technology para controle de bicudo e outras pragas.",
    "INFLUX": "Inseticida lagarticida premium para controle de todas as lagartas, especialmente helicoverpa.",
    "JOINER": "Inseticida acaricida com tecnologia PLINAZOLIN para culturas hortifr√∫ti.",
    "DUAL GOLD": "Herbicida para manejo de plantas daninhas.",
}

# Inicializar Gemini
gemini_api_key = os.getenv("GEMINI_API_KEY")
if not gemini_api_key:
    gemini_api_key = st.secrets.get("GEMINI_API_KEY", "")

if gemini_api_key:
    genai.configure(api_key=gemini_api_key)
    modelo_texto = genai.GenerativeModel("gemini-1.5-flash")
else:
    st.warning("API key do Gemini n√£o encontrada. Algumas funcionalidades estar√£o limitadas.")

# T√≠tulo do aplicativo
st.title("üìã Gerador de Briefings - SYN")
st.markdown("""
**Digite o conte√∫do da c√©lula do calend√°rio para gerar um briefing completo no padr√£o SYN.**
""")

# Fun√ß√µes principais
def extract_product_info(text: str) -> Tuple[str, str, str]:
    """Extrai informa√ß√µes do produto do texto da c√©lula"""
    if not text or not text.strip():
        return None, None, None
    
    text = str(text).strip()
    
    # Remover emojis e marcadores
    clean_text = re.sub(r'[üîµüü†üü¢üî¥üü£üîÉüì≤]', '', text).strip()
    
    # Padr√µes para extra√ß√£o
    patterns = {
        'product': r'\b([A-Z][A-Za-z\s]+(?:PRO|S|NEO|LLI|ELITE|COMPLETO|DUO|FLEXI|PLENO|XTRA)?)\b',
        'culture': r'\b(soja|milho|algod√£o|cana|trigo|HF|caf√©|citrus|batata|mel√£o|uva|tomate|multi)\b',
        'action': r'\b(depoimento|resultados|s√©rie|refor√ßo|controle|lan√ßamento|import√¢ncia|jornada|conceito|v√≠deo|a√ß√£o|diferenciais|awareness|problem√°tica|gloss√°rio|manejo|aplica√ß√£o|posicionamento)\b'
    }
    
    product_match = re.search(patterns['product'], clean_text, re.IGNORECASE)
    culture_match = re.search(patterns['culture'], clean_text, re.IGNORECASE)
    action_match = re.search(patterns['action'], clean_text, re.IGNORECASE)
    
    product = product_match.group(1).strip().upper() if product_match else None
    culture = culture_match.group(0).lower() if culture_match else "multi"
    action = action_match.group(0).lower() if action_match else "conscientiza√ß√£o"
    
    return product, culture, action

def generate_briefing(content: str, product_name: str, culture: str, action: str, data_input: datetime, formato_principal: str) -> str:
    """Gera um briefing completo no formato SYN"""
    
    # Formatar data
    data_str = data_input.strftime("%d/%m")
    
    # Determinar m√™s em portugu√™s
    meses = {
        1: "JANEIRO", 2: "FEVEREIRO", 3: "MAR√áO", 4: "ABRIL",
        5: "MAIO", 6: "JUNHO", 7: "JULHO", 8: "AGOSTO",
        9: "SETEMBRO", 10: "OUTUBRO", 11: "NOVEMBRO", 12: "DEZEMBRO"
    }
    mes = meses[data_input.month]
    
    # Determinar categoria baseada na cultura
    if culture in ["soja", "milho", "algod√£o", "trigo", "cana", "caf√©"]:
        categoria = culture.upper()
    elif culture in ["batata", "tomate", "mel√£o", "uva"]:
        categoria = "HF"
    else:
        categoria = "MULTI"
    
    description = PRODUCT_DESCRIPTIONS.get(product_name, "Descri√ß√£o do produto n√£o dispon√≠vel.")
    
    # Gerar briefing no formato correto
    briefing = f"""CALEND√ÅRIO DE PAUTAS - SYN

{mes} - {categoria}
{content.upper()}
Data prevista: {data_str}
Sugest√£o: {formato_principal}

{description}

Para essa pauta, a ser publicada na editoria {categoria}, vamos trabalhar com {product_name} na cultura do {culture}. O foco principal ser√° {action}.

A ideia √© desenvolver um conte√∫do que {action} do produto, mostrando seus benef√≠cios e diferenciais para o produtor.

Algumas fontes de informa√ß√µes:
- Portal Mais Agro: https://maisagro.syngenta.com.br
- Material t√©cnico do produto
- Resultados de campo e depoimentos

Pontos de aten√ß√£o:
- Manter tom t√©cnico e informativo
- Evitar linguagem alarmista
- Incluir CTAs para o portal Mais Agro
- Seguir guidelines de marca Syngenta

Para as redes sociais, podemos trazer os principais benef√≠cios do produto, convidando o p√∫blico a saber mais no blog.
"""
    
    return briefing

# Interface principal
st.markdown("### üìù Digite o conte√∫do da c√©lula do calend√°rio")

content_input = st.text_area(
    "Conte√∫do da c√©lula:",
    placeholder="Ex: megafol - s√©rie - potencial m√°ximo, todo o tempo",
    height=100,
    help="Cole aqui o conte√∫do exato da c√©lula do calend√°rio do Sheets"
)

# Campos opcionais para ajuste
col1, col2 = st.columns(2)

with col1:
    data_input = st.date_input("Data prevista:", value=datetime.now())

with col2:
    formato_principal = st.selectbox(
        "Formato principal:",
        ["Reels + capa", "Carrossel + stories", "Blog + redes", "V√≠deo + stories", "Multiplataforma"]
    )

generate_btn = st.button("üöÄ Gerar Briefing", type="primary")

# Processamento e exibi√ß√£o do briefing
if generate_btn and content_input:
    with st.spinner("Analisando conte√∫do e gerando briefing..."):
        # Extrair informa√ß√µes do produto
        product, culture, action = extract_product_info(content_input)
        
        if product and product in PRODUCT_DESCRIPTIONS:
            # Gerar briefing completo
            briefing = generate_briefing(content_input, product, culture, action, data_input, formato_principal)
            
            # Exibir briefing
            st.markdown("## üìã Briefing Gerado")
            st.text_area("Briefing:", value=briefing, height=400)
            
            # Bot√£o de download
            st.download_button(
                label="üì• Baixar Briefing",
                data=briefing,
                file_name=f"briefing_{product}_{data_input.strftime('%Y%m%d')}.txt",
                mime="text/plain"
            )
            
        elif product:
            st.warning(f"Produto '{product}' n√£o encontrado no dicion√°rio. Verifique a grafia.")
            st.info("Produtos dispon√≠veis: " + ", ".join(list(PRODUCT_DESCRIPTIONS.keys())[:10]) + "...")
        else:
            st.error("N√£o foi poss√≠vel identificar um produto no conte√∫do. Tente formatos como:")
            st.code("""
megafol - s√©rie - potencial m√°ximo, todo o tempo
verdavis - soja - depoimento produtor
engeo pleno s - milho - controle percevejo
miravis duo - algod√£o - refor√ßo preventivo
""")

# Se√ß√£o de exemplos
with st.expander("üìö Exemplos de Conte√∫do", expanded=True):
    st.markdown("""
**Formatos Reconhecidos:**
- `PRODUTO - CULTURA - A√á√ÉO`
- `PRODUTO - A√á√ÉO`
- `PRODUTO - CULTURA - TIPO DE CONTE√öDO`

**Exemplos:**
- `megafol - s√©rie - potencial m√°ximo, todo o tempo`
- `verdavis - milho - resultados do produto`
- `engeo pleno s - soja - resultados GTEC`
- `miravis duo - algod√£o - depoimento produtor`
- `axial - trigo - refor√ßo p√≥s-emergente`
- `manejo limpo - import√¢ncia manejo antecipado`
- `certano HF - a jornada de certano`
""")

# Rodap√©
st.markdown("---")
st.caption("Ferramenta de gera√ß√£o autom√°tica de briefings - Padr√£o SYN üìã")
